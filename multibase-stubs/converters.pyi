from _typeshed import Incomplete
from baseconv import BaseConverter  # type: ignore

class BaseStringConverter(BaseConverter):
    def encode(self, bytes: bytes) -> bytes: ...
    def bytes_to_int(self, bytes: bytes) -> int: ...
    def decode(self, bytes: bytes) -> bytes: ...

class Base16StringConverter(BaseStringConverter):
    def encode(self, bytes: bytes) -> bytes: ...

class BaseByteStringConverter:
    ENCODE_GROUP_BYTES: int
    ENCODING_BITS: int
    DECODING_BITS: int
    digits: Incomplete
    def __init__(self, digits): ...
    def encode(self, bytes): ...
    def decode(self, bytes): ...

class Base64StringConverter(BaseByteStringConverter):
    def encode(self, bytes: bytes) -> bytes: ...
    def decode(self, bytes: bytes) -> bytes: ...

class Base32StringConverter(BaseByteStringConverter):
    def encode(self, bytes: bytes) -> bytes: ...
    def decode(self, bytes: bytes) -> bytes: ...

class IdentityConverter:
    def encode(self, x): ...
    def decode(self, x): ...
