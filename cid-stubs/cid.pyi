from _typeshed import Incomplete
from typing import Union, Callable

class BaseCID:
    __hash__: Callable[[object], int]
    def __init__(self, version: int, codec: str, multihash: str) -> None: ...
    @property
    def version(self) -> int: ...
    @property
    def codec(self) -> str: ...
    @property
    def multihash(self) -> bytes: ...
    @property
    def buffer(self) -> None: ...
    def encode(self, *args, **kwargs) -> None: ...
    def __eq__(self, other): ...

class CIDv0(BaseCID):
    CODEC: str
    def __init__(self, multihash: bytes) -> None: ...
    @property
    def buffer(self): ...
    def encode(self): ...
    def to_v1(self) -> CIDv1: ...

class CIDv1(BaseCID):
    def __init__(self, codec: str, multihash: Union[str, bytes]) -> None: ...
    @property
    def buffer(self): ...
    def encode(self, encoding=...): ...
    def to_v0(self) -> CIDv0: ...

def make_cid(*args) -> Union[CIDv0, CIDv1]: ...
def is_cid(cidstr: Union[str, bytes]) -> bool: ...
def from_string(cidstr: str) -> Union[CIDv0, CIDv1]: ...
def from_bytes(cidbytes: bytes) -> Union[CIDv0, CIDv1]: ...
